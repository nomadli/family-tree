{"version":3,"sources":["components/Switch/index.js","components/MixedNodeElement.js","components/PureSvgNodeElement.js","utils/TreeConverter.js","components/Editor.js","components/Viewer.js","App.js","index.js"],"names":["Input","this","props","variable","name","onChange","checked","className","type","id","htmlFor","Component","MixedNodeElement","nodeData","triggerNodeToggle","foreignObjectProps","Fragment","r","style","display","flexDirection","alignItems","border","paddingBottom","backgroundColor","listStyleType","padding","attributes","Object","keys","map","labelKey","i","key","children","textAlign","onClick","__rd3t","collapsed","textLayout","vertical","title","textAnchor","x","attribute","dy","horizontal","y","PureSvgNodeElement","nodeDatum","orientation","toggleNode","onNodeClick","entries","labelValue","bfs","idRegex","parentIdRegex","extract","ancestryEntry","entryData","Error","val","parseAncestryEntry","trim","length","lines","split","line","forEach","def","join","match","matches","parentId","data","parseAncestryNotation","text","nodeMap","replace","filter","entry","tree","values","push","printAncestryEntry","node","attr","frontier","shift","child","childI","customNodeFnMapping","svg","description","fn","rd3tProps","appState","mixed","width","nodeSize","height","getEditDataFileLink","window","location","href","owner","projectPath","Editor","toggleCollapseNeighborNodes","handleConfigChange","prevState","shouldCollapseNeighborNodes","state","proposedAncestry","ancestryParsingError","bind","setTitle","setOrientation","setPathFunc","handleChange","handleStringChange","handleFloatChange","toggleCollapsible","toggleZoomable","setScaleExtent","setSeparation","setNodeSize","toggleLegacyTransitions","onDataChange","configurations","notation","setState","e","message","pathFunc","evt","target","parsedIntValue","parseInt","value","undefined","isNaN","parsedFloatValue","parseFloat","collapsible","zoomable","scaleExtent","separation","siblings","nonSiblings","enableLegacyTransitions","version","rel","navigator","clipboard","writeText","JSON","stringify","color","margin","event","tryUpdateAncestry","Switch","translateX","translateY","initialDepth","defaultValue","depthFactor","zoom","min","max","transitionDuration","configs","Viewer","dimensions","treeContainer","getBoundingClientRect","countNodes","count","n","reduce","sum","Array","isArray","ref","tc","renderCustomNodeElement","rootNodeClassName","branchNodeClassName","translate","styles","App","editMode","toggleEditMode","newData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.234d5a5e.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React, { Component } from 'react';\nimport './styles.css';\n\nclass Input extends Component {\n  static propTypes = {\n    name: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool.isRequired,\n    variable: PropTypes.object\n  };\n\n  render() {\n    const { variable, name, onChange, checked } = this.props;\n    return (\n      <div className='onoffswitch'>\n        <input type='checkbox' className='onoffswitch-checkbox' id={name} name={name}\n          onChange={onChange} checked={checked} {...variable} />\n        <label className='onoffswitch-label' htmlFor={name}>\n          <span className='onoffswitch-inner' />\n          <span className='onoffswitch-switch' />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Input;","import React from 'react';\n\nconst MixedNodeElement = ({ nodeData = {}, triggerNodeToggle, foreignObjectProps = {} }) => {\n  return (\n    <React.Fragment>\n      <circle r={20}></circle>\n      <foreignObject {...foreignObjectProps}>\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            border: '1px solid black',\n            paddingBottom: '1rem',\n            backgroundColor: 'rgb(248, 248, 255)', // ghostwhite\n          }}\n        >\n          <h3>{nodeData.name}</h3>\n          <ul style={{ listStyleType: 'none', padding: 0 }}>\n            {nodeData.attributes &&\n              Object.keys(nodeData.attributes).map((labelKey, i) => (\n                <li key={`${labelKey}-${i}`}>\n                  {labelKey}: {nodeData.attributes[labelKey]}\n                </li>\n              ))}\n          </ul>\n          {nodeData.children && (\n            <button style={{ textAlign: 'center' }} onClick={triggerNodeToggle}>\n              {nodeData.__rd3t.collapsed ? '⬅️ ➡️ Expand' : '➡️ ⬅️ Collapse'}\n            </button>\n          )}\n        </div>\n      </foreignObject>\n    </React.Fragment>\n  );\n};\n\nexport default MixedNodeElement;\n","import React from 'react';\n\nconst textLayout = {\n  vertical: {\n    title: {\n      textAnchor: 'start',\n      x: 40,\n    },\n    attributes: {},\n    attribute: {\n      x: 40,\n      dy: '1.2em',\n    },\n  },\n  horizontal: {\n    title: {\n      textAnchor: 'start',\n      y: 40,\n    },\n    attributes: {\n      x: 0,\n      y: 40,\n    },\n    attribute: {\n      x: 0,\n      dy: '1.2em',\n    },\n  },\n};\n\nconst PureSvgNodeElement = ({ nodeDatum, orientation, toggleNode, onNodeClick }) => {\n  return (\n    <>\n      <circle r={20} onClick={toggleNode}></circle>\n      <g className=\"rd3t-label\">\n        <text\n          className=\"rd3t-label__title\"\n          {...textLayout[orientation].title}\n          onClick={onNodeClick}\n        >\n          {nodeDatum.name}\n        </text>\n        <text className=\"rd3t-label__attributes\" {...textLayout[orientation].attributes}>\n          {nodeDatum.attributes &&\n            Object.entries(nodeDatum.attributes).map(([labelKey, labelValue], i) => (\n              <tspan key={`${labelKey}-${i}`} {...textLayout[orientation].attribute}>\n                {labelKey}: {labelValue}\n              </tspan>\n            ))}\n        </text>\n      </g>\n    </>\n  );\n};\n\nexport default PureSvgNodeElement;\n","const idRegex = /^1(\\.[1-9][0-9]*)*$/;\nconst parentIdRegex = /^(1(\\.[1-9][0-9]*)*)\\.[1-9][0-9]*$/;\n\nfunction extract(ancestryEntry, entryData, key) {\n  if (!(key in entryData))\n    throw Error(`Entry:\n\n${ancestryEntry}\n\nmust have a '${key}' defined`);\n  const val = entryData[key];\n  delete entryData[key];\n  return val;\n}\n\nfunction parseAncestryEntry(ancestryEntry) {\n  if (ancestryEntry.trim().length === 0)\n    return null;\n\n  const entryData = {};\n  const lines = ancestryEntry.trim().split('\\n');\n\n  if (lines.length === 0)\n    return null;\n\n  lines\n    .map(line => line.split('='))\n    .forEach(def => {\n      if (def.length !== 2)\n        throw Error(`Malformed line \"${def.join('=')}\" in entry:\n\n${ancestryEntry}\n\nThe expected format is: property=value`);\n      if (def[0] in entryData)\n        throw Error(`Entry:\n\n${ancestryEntry}\n\nhas a duplicate property ${def[0]}'`);\n      entryData[def[0]] = (def[1] || '').trim();\n    });\n  const id = extract(ancestryEntry, entryData, 'id');\n  const name = extract(ancestryEntry, entryData, 'name');\n  if (!id.match(idRegex))\n    throw Error(`id must match pattern \"${idRegex}\" (eg: 1.2.1),\nbut instead ${id} was found`);\n  const matches = id.match(parentIdRegex);\n  const parentId = (matches && matches.length > 1) ? matches[1] : null;\n  return {id, parentId, data: {name, attributes: entryData, children: []}};\n}\n\nexport function parseAncestryNotation(text) {\n  const nodeMap = {};\n  text.replace('\\r', '')\n    .split('\\n\\n')\n    .map(parseAncestryEntry)\n    .filter(entry => entry != null)\n    .forEach(entry => {\n      if (entry.id in nodeMap)\n        throw Error(`Duplicate id found: ${entry.id}`);\n      nodeMap[entry.id] = entry;\n    });\n  let tree = null;\n  Object.values(nodeMap)\n    .forEach(entry => {\n      if (entry.parentId) {\n        if (!(entry.parentId in nodeMap))\n          throw Error(`Found an entry with 'id=${entry.id}' but no parent exists with 'id=${entry.parentId}'`);\n        nodeMap[entry.parentId].data.children.push(entry.data);\n      } else {\n        if (entry.id !== '1')\n          throw Error(`The original ancestor must have an id=1 .\n          All other entries must be descendents (eg. 1.1, 1.2, 1.2.1, etc).\n          But an entry was found with 'id=${entry.id}'`);\n        tree = entry.data;\n      }\n    });\n\n  Object.values(nodeMap)\n    .filter(entry => entry.data.children.length === 0)\n    .forEach(entry => entry.data.children = null);\n\n  if (tree === null)\n    throw Error('At least one entry must exist with id=1 to represent the original ancestor.');\n  return tree;\n}\n\nfunction printAncestryEntry(entry) {\n  return `id=${entry.id}\nname=${entry.node.name}\n${entry.node.attributes ? Object.entries(entry.node.attributes)\n    .map(attr => attr.join('=') + '\\n')\n    .join('') : ''}`;\n}\n\nfunction* bfs(tree) {\n  const frontier = [{id: '1', node: tree}];\n  while (frontier.length > 0) {\n    const entry = frontier.shift();\n    yield entry;\n    if (entry.node.children) {\n      entry.node.children.forEach((child, childI) => {\n        frontier.push({id: `${entry.id}.${childI + 1}`, node: child});\n      });\n    }\n  }\n}\n\nexport function printAncestryNotation(tree) {\n  return [...bfs(tree)].map(printAncestryEntry).join('\\n');\n}\n","import React, {Component} from 'react';\nimport {version} from '../../package.json';\nimport Switch from './Switch';\nimport MixedNodeElement from './MixedNodeElement';\nimport PureSvgNodeElement from './PureSvgNodeElement';\nimport '../App.css';\nimport {parseAncestryNotation, printAncestryNotation} from '../utils/TreeConverter';\nimport {Tab, TabList, TabPanel, Tabs} from \"react-tabs\";\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, appState) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={appState.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({nodeDatum, toggleNode}, appState) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: appState.nodeSize.x,\n          height: appState.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n};\n\nfunction getEditDataFileLink() {\n  const matches = window.location.href.match(/https:\\/\\/(.*)\\.github.io\\/(.*)\\//);\n  if (!matches || matches.length < 3) {\n    return 'https://github.com/nomadli/family-tree/edit/master/src/data/data.json';\n  }\n  const owner = matches[1];\n  const projectPath = matches[2];\n  return `https://github.com/${owner}/${projectPath}/edit/master/src/data/data.json`;\n}\n\nclass Editor extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      proposedAncestry: printAncestryNotation(props.data.tree),\n      ancestryParsingError: null,\n    };\n\n    this.handleConfigChange = this.handleConfigChange.bind(this);\n    this.setTitle = this.setTitle.bind(this);\n    this.setOrientation = this.setOrientation.bind(this);\n    this.setPathFunc = this.setPathFunc.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleStringChange = this.handleStringChange.bind(this);\n    this.handleFloatChange = this.handleFloatChange.bind(this);\n    this.toggleCollapsible = this.toggleCollapsible.bind(this);\n    this.toggleZoomable = this.toggleZoomable.bind(this);\n    this.setScaleExtent = this.setScaleExtent.bind(this);\n    this.setSeparation = this.setSeparation.bind(this);\n    this.setNodeSize = this.setNodeSize.bind(this);\n    this.toggleLegacyTransitions = this.toggleLegacyTransitions.bind(this);\n  }\n\n  handleConfigChange(state) {\n    if (!this.props.onDataChange)\n      return;\n    if (typeof state === 'function') {\n      state = state(this.props.data.configurations);\n    }\n    this.props.onDataChange({\n      tree: this.props.data.tree,\n      configurations: {...this.props.data.configurations, ...state}\n    });\n  }\n\n  tryUpdateAncestry(notation) {\n    this.setState({proposedAncestry: notation});\n    try {\n      this.setState({\n        ancestryParsingError: null\n      });\n      this.props.onDataChange({\n        tree: parseAncestryNotation(notation),\n        configurations: this.props.data.configurations\n      });\n    } catch (e) {\n      this.setState({ancestryParsingError: e.message});\n    }\n  }\n\n  setTitle(title) {\n    this.handleConfigChange({title});\n  }\n\n  setOrientation(orientation) {\n    this.handleConfigChange({orientation});\n  }\n\n  setPathFunc(pathFunc) {\n    this.handleConfigChange({pathFunc});\n  }\n\n  handleChange(evt) {\n    const target = evt.target;\n    const parsedIntValue = parseInt(target.value, 10);\n    if (target.value === '') {\n      this.handleConfigChange({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedIntValue)) {\n      this.handleConfigChange({\n        [target.name]: parsedIntValue,\n      });\n    }\n  }\n\n  handleStringChange(evt) {\n    const {name, value} = evt.target;\n    if (value === '') {\n      this.handleConfigChange({\n        [name]: undefined,\n      });\n    } else {\n      this.handleConfigChange({\n        [name]: value,\n      });\n    }\n  }\n\n  handleFloatChange(evt) {\n    const target = evt.target;\n    const parsedFloatValue = parseFloat(target.value);\n    if (target.value === '') {\n      this.handleConfigChange({\n        [target.name]: undefined,\n      });\n    } else if (!isNaN(parsedFloatValue)) {\n      this.handleConfigChange({\n        [target.name]: parsedFloatValue,\n      });\n    }\n  }\n\n  toggleCollapsible() {\n    this.handleConfigChange(prevState => ({collapsible: !prevState.collapsible}));\n  }\n\n  toggleCollapseNeighborNodes = () => {\n    this.handleConfigChange(prevState => ({\n      shouldCollapseNeighborNodes: !prevState.shouldCollapseNeighborNodes,\n    }));\n  };\n\n  toggleZoomable() {\n    this.handleConfigChange(prevState => ({zoomable: !prevState.zoomable}));\n  }\n\n  setScaleExtent(scaleExtent) {\n    this.handleConfigChange({scaleExtent});\n  }\n\n  setSeparation(separation) {\n    if (!isNaN(separation.siblings) && !isNaN(separation.nonSiblings)) {\n      this.handleConfigChange({separation});\n    }\n  }\n\n  setNodeSize(nodeSize) {\n    if (!isNaN(nodeSize.x) && !isNaN(nodeSize.y)) {\n      this.handleConfigChange({nodeSize});\n    }\n  }\n\n  toggleLegacyTransitions() {\n    this.handleConfigChange(prevState => ({\n      enableLegacyTransitions: !prevState.enableLegacyTransitions,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"column-left flex-container-vertical\">\n        <h2 className=\"title flex-conservative\">李强的族谱 v{version}</h2>\n\n        <Tabs className=\"controls-container flex-container-vertical flex-greedy\">\n          <TabList className=\"flex-conservative\">\n            <Tab>Save / Export</Tab>\n            <Tab>Ancestry</Tab>\n            <Tab>Configurations</Tab>\n          </TabList>\n          <TabPanel className=\"controls-container\">\n            <div className=\"prop-container\">\n              Save your changes to avoid loosing your data.<br/>\n              <h5>Steps to save your changes</h5>\n              <ol>\n                <li>Copy all your changes using the 'Copy Tree & Configurations' button below</li>\n                <li>Open your <a\n                  href={getEditDataFileLink()}\n                  target='_blank'\n                  rel='noopener noreferrer'>data file</a> and\n                  paste your changes there.<br/>\n                  Finally, hit the 'Commit changes' button at the bottom.\n                </li>\n                <li>If all goes well, your changes should reflect in a few minutes once you refresh the page.</li>\n              </ol>\n\n              <button\n                type=\"button\"\n                className=\"btn btn-block\"\n                onClick={() => navigator.clipboard.writeText(JSON.stringify(this.props.data, null, 2))}\n              >\n                {'Copy Tree & Configurations'}\n              </button>\n            </div>\n          </TabPanel>\n          <TabPanel className=\"controls-container flex-container-vertical flex-greedy\">\n            {this.state.ancestryParsingError &&\n            <pre className=\"flex-conservative\" style={{color: 'red',}}>{this.state.ancestryParsingError}</pre>}\n            <textarea className=\"flex-greedy\"\n                      style={{width: '100%', margin: '4px', color: this.state.ancestryParsingError ? 'red' : 'black'}}\n                      value={this.state.proposedAncestry}\n                      onChange={(event) => this.tryUpdateAncestry(event.target.value)}/>\n          </TabPanel>\n          <TabPanel className=\"controls-container\">\n            <div className=\"prop-container\">\n              <h4 className=\"prop\">Title</h4>\n              <input\n                type=\"text\"\n                value={this.props.data.configurations.title}\n                onChange={(event) => this.setTitle(event.target.value)}\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <h4 className=\"prop\">Orientation</h4>\n              <button\n                type=\"button\"\n                className=\"btn btn-controls btn-block\"\n                onClick={() => this.setOrientation('horizontal')}\n              >\n                {'Horizontal'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-controls btn-block\"\n                onClick={() => this.setOrientation('vertical')}\n              >\n                {'Vertical'}\n              </button>\n            </div>\n\n            <div className=\"prop-container\">\n              <h4 className=\"prop\">Path Function</h4>\n              <button\n                type=\"button\"\n                className=\"btn btn-controls btn-block\"\n                onClick={() => this.setPathFunc('diagonal')}\n              >\n                {'Diagonal'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-controls btn-block\"\n                onClick={() => this.setPathFunc('elbow')}\n              >\n                {'Elbow'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-controls btn-block\"\n                onClick={() => this.setPathFunc('straight')}\n              >\n                {'Straight'}\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-controls btn-block\"\n                onClick={() => this.setPathFunc('step')}\n              >\n                {'Step'}\n              </button>\n            </div>\n\n            <div className=\"prop-container\">\n              <label className=\"prop\" htmlFor=\"customNodeElement\">\n                Custom Node Element\n              </label>\n              <select className=\"form-control\" name=\"renderCustomNodeElement\" onChange={this.handleStringChange}>\n                {Object.entries(customNodeFnMapping).map(([key, {description}]) => (\n                  <option key={key} value={key}>\n                    {description}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div className=\"prop-container\">\n              <h4 className=\"prop\">Collapsible</h4>\n              <Switch\n                name=\"collapsibleBtn\"\n                checked={this.props.data.configurations.collapsible}\n                onChange={this.toggleCollapsible}\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <h4 className=\"prop\">Collapse neighbor nodes</h4>\n              <Switch\n                name=\"collapseNeighborsBtn\"\n                checked={this.props.data.configurations.shouldCollapseNeighborNodes}\n                onChange={this.toggleCollapseNeighborNodes}\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <h4 className=\"prop\">Enable Legacy Transitions</h4>\n              <Switch\n                name=\"enableLegacyTransitionsBtn\"\n                checked={this.props.data.configurations.enableLegacyTransitions}\n                onChange={this.toggleLegacyTransitions}\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <div>\n                <label className=\"prop\" htmlFor=\"translateX\">\n                  Translate X\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"translateX\"\n                  type=\"number\"\n                  value={this.props.data.configurations.translateX}\n                  onChange={this.handleChange}\n                />\n              </div>\n              <div>\n                <label className=\"prop\" htmlFor=\"translateY\">\n                  Translate Y\n                </label>\n                <input\n                  className=\"form-control\"\n                  name=\"translateY\"\n                  type=\"number\"\n                  value={this.props.data.configurations.translateY}\n                  onChange={this.handleChange}\n                />\n              </div>\n            </div>\n\n            <div className=\"prop-container\">\n              <label className=\"prop\" htmlFor=\"initialDepth\">\n                Initial Depth\n              </label>\n              <input\n                className=\"form-control\"\n                style={{color: 'grey'}}\n                name=\"initialDepth\"\n                type=\"text\"\n                value={this.props.data.configurations.initialDepth}\n                onChange={this.handleChange}\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <label className=\"prop\" htmlFor=\"depthFactor\">\n                Depth Factor\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"depthFactor\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.depthFactor}\n                onChange={this.handleChange}\n              />\n            </div>\n\n            {/* <div className=\"prop-container prop\">{`Zoomable: ${this.state.zoomable}`}</div> */}\n\n            <div className=\"prop-container\">\n              <label className=\"prop\" htmlFor=\"zoom\">\n                Zoom\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"zoom\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.zoom}\n                onChange={this.handleFloatChange}\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <span className=\"prop prop-large\">Scale Extent</span>\n              <label className=\"sub-prop\" htmlFor=\"scaleExtentMin\">\n                Min\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"scaleExtentMin\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.scaleExtent.min}\n                onChange={evt =>\n                  this.setScaleExtent({\n                    min: parseFloat(evt.target.value),\n                    max: this.props.data.configurations.scaleExtent.max,\n                  })\n                }\n              />\n              <label className=\"sub-prop\" htmlFor=\"scaleExtentMax\">\n                Max\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"scaleExtentMax\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.scaleExtent.max}\n                onChange={evt =>\n                  this.setScaleExtent({\n                    min: this.props.data.configurations.scaleExtent.min,\n                    max: parseFloat(evt.target.value),\n                  })\n                }\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <span className=\"prop prop-large\">Node separation</span>\n              <label className=\"sub-prop\" htmlFor=\"separationSiblings\">\n                Siblings\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"separationSiblings\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.separation.siblings}\n                onChange={evt =>\n                  this.setSeparation({\n                    siblings: parseFloat(evt.target.value),\n                    nonSiblings: this.props.data.configurations.separation.nonSiblings,\n                  })\n                }\n              />\n              <label className=\"sub-prop\" htmlFor=\"separationNonSiblings\">\n                Non-Siblings\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"separationNonSiblings\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.separation.nonSiblings}\n                onChange={evt =>\n                  this.setSeparation({\n                    siblings: this.props.data.configurations.separation.siblings,\n                    nonSiblings: parseFloat(evt.target.value),\n                  })\n                }\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <span className=\"prop prop-large\">Node size</span>\n              <label className=\"sub-prop\" htmlFor=\"nodeSizeX\">\n                X\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"nodeSizeX\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.nodeSize.x}\n                onChange={evt =>\n                  this.setNodeSize({x: parseFloat(evt.target.value), y: this.props.data.configurations.nodeSize.y})\n                }\n              />\n              <label className=\"sub-prop\" htmlFor=\"nodeSizeY\">\n                Y\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"nodeSizeY\"\n                type=\"number\"\n                defaultValue={this.props.data.configurations.nodeSize.y}\n                onChange={evt =>\n                  this.setNodeSize({x: this.props.data.configurations.nodeSize.x, y: parseFloat(evt.target.value)})\n                }\n              />\n            </div>\n\n            <div className=\"prop-container\">\n              <label className=\"prop\" htmlFor=\"transitionDuration\">\n                Transition Duration\n              </label>\n              <input\n                className=\"form-control\"\n                name=\"transitionDuration\"\n                type=\"number\"\n                value={this.props.data.configurations.transitionDuration}\n                onChange={this.handleChange}\n              />\n            </div>\n          </TabPanel>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default Editor;\n","import React, {Component} from 'react';\nimport Tree from 'react-d3-tree';\nimport MixedNodeElement from './MixedNodeElement';\nimport PureSvgNodeElement from './PureSvgNodeElement';\nimport '../App.css';\n\nconst countNodes = (count = 0, n) => {\n  // Count the current node\n  count += 1;\n\n  // Base case: reached a leaf node.\n  if (!n.children) {\n    return count;\n  }\n\n  // Keep traversing children while updating `count` until we reach the base case.\n  return n.children.reduce((sum, child) => countNodes(sum, child), count);\n};\n\nconst customNodeFnMapping = {\n  svg: {\n    description: 'Default - Pure SVG node & label (IE11 compatible)',\n    fn: (rd3tProps, configs) => (\n      <PureSvgNodeElement\n        nodeDatum={rd3tProps.nodeDatum}\n        toggleNode={rd3tProps.toggleNode}\n        orientation={configs.orientation}\n      />\n    ),\n  },\n  mixed: {\n    description: 'MixedNodeElement - SVG `circle` + `foreignObject` label',\n    fn: ({nodeDatum, toggleNode}, configs) => (\n      <MixedNodeElement\n        nodeData={nodeDatum}\n        triggerNodeToggle={toggleNode}\n        foreignObjectProps={{\n          width: configs.nodeSize.x,\n          height: configs.nodeSize.y,\n          x: -50,\n          y: 50,\n        }}\n      />\n    ),\n  },\n};\n\nclass Viewer extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      translateX: props.configurations.translateX,\n      translateY: props.configurations.translateY,\n    };\n  }\n\n  componentDidMount() {\n    const dimensions = this.treeContainer.getBoundingClientRect();\n    this.setState({\n      translateX: dimensions.width / 2.5,\n      translateY: dimensions.height / 2,\n    });\n  }\n\n  render() {\n    const {tree, configurations} = this.props;\n    return (\n      <div className=\"column-right\">\n        <div className=\"tree-stats-container\">\n          <h2>{configurations.title}</h2>\n          {countNodes(0, Array.isArray(tree) ? tree[0] : tree)} 位家族成员.<br/>\n        </div>\n        <div ref={tc => (this.treeContainer = tc)} className=\"tree-container\">\n          <Tree\n            data={tree}\n            renderCustomNodeElement={\n              configurations.renderCustomNodeElement\n                ? rd3tProps => customNodeFnMapping[configurations.renderCustomNodeElement].fn(rd3tProps, configurations)\n                : undefined\n            }\n            rootNodeClassName=\"demo-node\"\n            branchNodeClassName=\"demo-node\"\n            orientation={configurations.orientation}\n            translate={{x: this.state.translateX, y: this.state.translateY}}\n            pathFunc={configurations.pathFunc}\n            collapsible={configurations.collapsible}\n            initialDepth={configurations.initialDepth}\n            zoomable={configurations.zoomable}\n            zoom={configurations.zoom}\n            scaleExtent={configurations.scaleExtent}\n            nodeSize={configurations.nodeSize}\n            separation={configurations.separation}\n            enableLegacyTransitions={configurations.enableLegacyTransitions}\n            transitionDuration={configurations.transitionDuration}\n            depthFactor={configurations.depthFactor}\n            styles={configurations.styles}\n            shouldCollapseNeighborNodes={configurations.shouldCollapseNeighborNodes}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Viewer;\n","import React, {Component} from 'react';\nimport Editor from \"./components/Editor\";\n// Data\nimport data from './data/data.json';\nimport Viewer from \"./components/Viewer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editMode: false,\n      data\n    }\n    this.toggleEditMode = this.toggleEditMode.bind(this);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"demo-container\">\n          <button title={'Edit'}\n                  onClick={this.toggleEditMode}/>\n          {this.state.editMode &&\n          <Editor data={this.state.data}\n                  onDataChange={newData => this.setState({data: newData})}/>}\n          <div className=\"column-right\">\n            <Viewer configurations={this.state.data.configurations} tree={this.state.data.tree}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  toggleEditMode() {\n    this.setState({editMode: !this.state.editMode})\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'react-tabs/style/react-tabs.css';\nimport App from \"./App\";\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}